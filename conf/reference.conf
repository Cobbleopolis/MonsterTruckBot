play {
  i18n {
    langs = ["en"]
  }
  modules {
    disabled += "play.api.i18n.I18nModule"
    enabled += "com.marcospereira.play.i18n.HoconI18nModule"
    enabled += "modules.MonsterTruckBotModule"
    enabled += "discord.DiscordBotModule"
    enabled += "twitch.TwitchBotModule"
  }
  cache {
    bindCaches = ["db-cache", "auth"]
  }
  path = "/public"
  urlPrefix = "/assets"
  filters {
    headers {
      contentSecurityPolicy = "default-src 'self'; img-src 'self' data:;"
    }
  }
  http {
    # Session configuration
    session = {

      # The cookie name
      cookieName = "MTR_BOT_SESSION"

      # Whether the secure attribute of the cookie should be set to true
      secure = false

      # The max age to set on the cookie.
      # If null, the cookie expires when the user closes their browser.
      # An important thing to note, this only sets when the browser will discard the cookie.
      maxAge = 604800 seconds # 1 week

      # Whether the HTTP only attribute of the cookie should be set to true
      httpOnly = true

      # The value of the SameSite attribute of the cookie. Set to null for no SameSite attribute.
      sameSite = "strict"

      # The domain to set on the session cookie
      # If null, does not set a domain on the session cookie.
      domain = null

      # The session path
      # Must start with /.
      path = ${play.http.context}

      jwt {
        # The JWT signature algorithm to use on the session cookie
        # uses 'alg' https://tools.ietf.org/html/rfc7515#section-4.1.1
        signatureAlgorithm = "HS256"

        # The time after which the session is automatically invalidated.
        # Use 'exp' https://tools.ietf.org/html/rfc7519#section-4.1.4
        expiresAfter = ${play.http.session.maxAge}

        # The amount of clock skew to accept between servers when performing date checks
        # If you have NTP or roughtime synchronizing between servers, you can enhance
        # security by tightening this value.
        clockSkew = 5 minutes

        # The claim key under which all user data is stored in the JWT.
        dataClaim = "data"
      }
    }
  }
}

db {
  default {
    driver = org.postgresql.Driver
    logStatements = true
    logSql = true
  }
}

oauth {
  authUrl = "https://discordapp.com/api/oauth2/authorize"
  tokenUrl = "https://discordapp.com/api/v6/oauth2/token"
  scopes = [
    "identify"
  ]
}

mtrBot {
  commandPrefix = "!"
  cacheTimeout = "2h"
  discord {
    username = "Monster Truck Bot"
    game = "Hap! Hap! Hap!"
  }
  twitch {
    neededOauthScopes = ["channel_editor", "channel_subscriptions"]
  }
}